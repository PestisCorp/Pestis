#define blockSize 512

struct Boid
{
    float2 pos;
    float2 vel;
    int player;
    int horde;
    bool dead;
};

StructuredBuffer<Boid> boidsIn;
RWStructuredBuffer<Boid> boidsOut;

uniform uint numBoids;
/// Number of boids in the previous frame
uniform uint numBoidsPrevious;
uniform float velocityDeltaTime;
uniform float positionDeltaTime;
uniform float maxSpeed;
uniform float minSpeed;
uniform float edgeMargin;
uniform float visualRangeSq;
uniform float cohesionFactor;
uniform float separationFactor;
uniform float alignmentFactor;
uniform float minDistanceSq;
uniform float turnSpeed;
uniform float xBound;
uniform float yBound;
/// Target position for boids to move towards
uniform float2 targetPos = float2(0, 0);
uniform float targetFactor;
// Player ID these boids belong to
uniform int player;
// Horde ID these boids belong to
uniform int horde;

uniform bool combatRats;
uniform bool receivedBoidsThisFrame;

uniform float2 spawnPoint;

uniform float targetPosX;
uniform float targetPosY;
/// Cumulative boid count for each grid cell
/// I.e. count for block N is the sum of counts for blocks 0 to N
StructuredBuffer<uint> gridOffsetBuffer;
uniform float gridCellSize;
uniform uint gridDimY;
uniform uint gridDimX;

struct BoidPoi
{
    float2 Pos;
    float RadiusSQ;
};

StructuredBuffer<BoidPoi> pois;
StructuredBuffer<uint> poiOffsets;
uniform float poiGridCellSize;
uniform uint poiGridDimX;
uniform uint poiGridDimY;

/// TopY, LeftX, BottomY, RightX
RWStructuredBuffer<uint> gridBounds;

// Left, Top, Right, Bottom
// Holds uints, but their bits are actually floats, since the Atomic APIs only support ints
// This is fine because we only compare for equality, and nothing else, so doesn't matter what the underlying bits represent
RWStructuredBuffer<uint> bounds;

uint getPOIGridID(Boid boid)
{
    int x = floor(boid.pos.x / poiGridCellSize + poiGridDimX / 2);
    int y = floor(boid.pos.y / poiGridCellSize + poiGridDimY / 2);
    return (poiGridDimX * y) + x;
}

uint2 getGridLocation(Boid boid)
{
    int x = floor(boid.pos.x / gridCellSize + gridDimX / 2);
    int y = floor(boid.pos.y / gridCellSize + gridDimY / 2);
    return uint2(x, y);
}

/// Get Grid Index from 2D grid coordinate
uint getGridID(uint2 pos)
{
    return (gridDimX * pos.y) + pos.x;
}

void MergedBehaviours(inout Boid boid, uint3 id)
{
    float2 close = 0;
    float2 avgVel = 0;
    uint neighbours = 0;

    uint2 gridXY = getGridLocation(boid);
    uint cell = getGridID(gridXY);

    // Loop row above, current row, row below
    for (uint y = cell - gridDimX; y <= cell + gridDimX; y += gridDimX)
    {
        // y-2 because that gives last index of boid in y-2, i.e. first index of boid in y-1
        uint start = gridOffsetBuffer[y - 2];
        uint end = gridOffsetBuffer[y + 1];
        // Loop boids in left, center, right grid cells
        for (uint i = start; i < end; i++)
        {
            Boid other = boidsIn[i];
            if (other.dead || i == id.x) // Don't change behaviour because of corpses
            {
                continue;
            }
            float2 diff = boid.pos - other.pos;
            // To never be 0
            float distSq = dot(diff, diff) + 0.001;

            close += (diff / distSq) * (-sign(distSq - minDistanceSq) + 0.99f);

            avgVel += other.vel;
            neighbours++;
        }
    }

    cell = getPOIGridID(boid);

    float2 poiClose;
    // Loop row above, current row, row below
    for (uint y2 = cell - poiGridDimX; y2 <= cell + poiGridDimX; y2 += poiGridDimX)
    {
        // y-2 because that gives last index of boid in y-2, i.e. first index of POI in y-1
        uint start = poiOffsets[y2 - 2];
        uint end = poiOffsets[y2 + 1];
        // Loop POIs in left, center, right grid cells
        for (uint i = start; i < end; i++)
        {
            BoidPoi other = pois[i];
            float2 diff = boid.pos - other.Pos;
            float distSq = dot(diff, diff);

            if (distSq > 0 && distSq < other.RadiusSQ)
            {
                poiClose += diff / distSq;
            }
        }
    }

    boid.vel += normalize(targetPos - boid.pos) * (targetFactor * velocityDeltaTime * turnSpeed);
    boid.vel += close * (separationFactor * velocityDeltaTime * turnSpeed);
    boid.vel += poiClose * (50 * velocityDeltaTime * turnSpeed);

    if (neighbours > 0)
    {
        avgVel /= neighbours;
        boid.vel += (avgVel - boid.vel) * (alignmentFactor * velocityDeltaTime * turnSpeed);
    }
    else if (numBoidsPrevious > 30 && !receivedBoidsThisFrame) // Boid has become separated from the pack
    {
        boid.pos = boidsIn[numBoids / 2].pos;
    }
}

void LimitSpeed(inout Boid boid)
{
    float speed = length(boid.vel);
    float clampedSpeed = clamp(speed, minSpeed, maxSpeed);
    boid.vel *= clampedSpeed / speed;
}

#pragma kernel UpdateBoidsVelocity // ID 0
[numthreads(blockSize, 1, 1)]
void UpdateBoidsVelocity(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numBoids)
    {
        // Freshly died
        if (id.x < numBoidsPrevious && combatRats)
        {
            Boid boid = boidsIn[id.x];
            boid.dead = true;
            boidsOut[id.x] = boid;
        }

        return;
    }


    Boid boid = boidsIn[id.x];

    // Initialise new boid
    if (id.x >= numBoidsPrevious)
    {
        boid.player = player;
        boid.horde = horde;
        boid.dead = false;
        if (numBoidsPrevious == 0)
        {
            boid.pos = float2(targetPosX, targetPosY);
            boid.vel = float2(0, 0);
        }
        else
        {
            if (spawnPoint.x == 0 && spawnPoint.y == 0)
            {
                float2 pos = boidsIn[floor(numBoidsPrevious / 2.0f)].pos;
                boid.pos = float2(pos.x + (id.x / 1000.0f), pos.y + (id.x / 1000.0f));
            }
            else
            {
                boid.pos = float2(spawnPoint.x + (id.x / 1000.0f), spawnPoint.y + (id.x / 1000.0f));
            }
            boid.vel = float2(id.x / 1000.0f, id.x / 1000.0f);
        }
    }

    MergedBehaviours(boid, id);
    LimitSpeed(boid);

    // Update positions
    boid.pos += boid.vel * positionDeltaTime;
    boidsOut[id.x] = boid;
}

#pragma kernel UpdateBoidsPositions
[numthreads(blockSize, 1, 1)]
void UpdateBoidsPositions(uint3 id: SV_DispatchThreadID)
{
    if (id.x >= numBoidsPrevious) { return; }

    Boid boid = boidsIn[id.x];
    boid.pos += boid.vel * positionDeltaTime;
    boidsOut[id.x] = boid;
}


#pragma kernel UpdateBounds
[numthreads(blockSize, 1, 1)]
void UpdateBounds(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numBoids) return;

    Boid boid = boidsIn[id.x];

    uint2 location = getGridLocation(boid);
    if (location.y > gridBounds[0] || location.x < gridBounds[1] || location.y < gridBounds[2] || location.x >
        gridBounds[3])
    {
        return;
    }

    float left = asfloat(bounds[0]);
    while (boid.pos.x < left)
    {
        InterlockedCompareStore(bounds[0], asuint(left), asuint(boid.pos.x));
        left = asfloat(bounds[0]);
    }

    float top = asfloat(bounds[1]);
    while (boid.pos.y > top)
    {
        InterlockedCompareStore(bounds[1], asuint(top), asuint(boid.pos.y));
        top = asfloat(bounds[1]);
    }

    float right = asfloat(bounds[2]);
    while (boid.pos.x > right)
    {
        InterlockedCompareStore(bounds[2], asuint(right), asuint(boid.pos.x));
        right = asfloat(bounds[2]);
    }

    float bottom = asfloat(bounds[3]);
    while (boid.pos.y < bottom)
    {
        InterlockedCompareStore(bounds[3], asuint(bottom), asuint(boid.pos.y));
        bottom = asfloat(bounds[3]);
    }
}


#pragma kernel UpdateGridBounds
[numthreads(20, 20, 1)]
void UpdateGridBounds(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= gridDimX || id.y >= gridDimY) return;

    // Check if cell is populated by checking offsets
    uint cell = id.x + id.y * gridDimX;
    uint start = gridOffsetBuffer[cell];
    uint end = gridOffsetBuffer[cell + 1];
    if (start == end)
    {
        return;
    }

    uint top = gridBounds[0];
    while (id.y > top)
    {
        InterlockedCompareStore(gridBounds[0], top, id.y);
        top = gridBounds[0];
    }

    uint left = gridBounds[1];
    while (id.x < left)
    {
        InterlockedCompareStore(gridBounds[1], left, id.x);
        left = gridBounds[1];
    }

    uint bottom = gridBounds[2];
    while (id.y < bottom)
    {
        InterlockedCompareStore(gridBounds[2], bottom, id.y);
        bottom = gridBounds[2];
    }

    uint right = gridBounds[3];
    while (id.x > right)
    {
        InterlockedCompareStore(gridBounds[3], right, id.x);
        right = gridBounds[3];
    }
}
