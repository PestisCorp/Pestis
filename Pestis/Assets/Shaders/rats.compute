#define blockSize 512

struct Boid
{
    float2 pos;
    float2 vel;
    int player;
    int horde;
    bool dead;
};

StructuredBuffer<Boid> boidsIn;
RWStructuredBuffer<Boid> boidsOut;

uniform uint numBoids;
/// Number of boids in the previous frame
uniform uint numBoidsPrevious;
uniform float deltaTime;
uniform float maxSpeed;
uniform float minSpeed;
uniform float edgeMargin;
uniform float visualRangeSq;
uniform float cohesionFactor;
uniform float separationFactor;
uniform float alignmentFactor;
uniform float minDistanceSq;
uniform float turnSpeed;
uniform float xBound;
uniform float yBound;
/// Target position for boids to move towards
float2 targetPos = float2(0, 0);
uniform float targetFactor;
// Player ID these boids belong to
uniform int player;
// Horde ID these boids belong to
uniform int horde;

uniform bool combatRats;

float2 spawnPoint;

float targetPosX;
float targetPosY;
/// Cumulative boid count for each grid cell
/// I.e. count for block N is the sum of counts for blocks 0 to N
StructuredBuffer<uint> gridOffsetBuffer;
float gridCellSize;
uint gridDimY;
uint gridDimX;

struct BoidPoi
{
    float2 Pos;
    float RadiusSQ;
};

StructuredBuffer<BoidPoi> pois;
StructuredBuffer<uint> poiOffsets;
uniform float poiGridCellSize;
uniform uint poiGridDimX;
uniform uint poiGridDimY;

// Left, Top, Right, Bottom
// Holds uints, but their bits are actually floats, since the Atomic APIs only support ints
// This is fine because we only compare for equality, and nothing else, so doesn't matter what the underlying bits represent
RWStructuredBuffer<uint> bounds;

uint getPOIGridID(Boid boid)
{
    int x = floor(boid.pos.x / poiGridCellSize + poiGridDimX / 2);
    int y = floor(boid.pos.y / poiGridCellSize + poiGridDimY / 2);
    return (poiGridDimX * y) + x;
}

uint2 getGridLocation(Boid boid)
{
    int x = floor(boid.pos.x / gridCellSize + gridDimX / 2);
    int y = floor(boid.pos.y / gridCellSize + gridDimY / 2);
    return uint2(x, y);
}

/// Get Grid Index from 2D grid coordinate
uint getGridID(uint2 pos)
{
    return (gridDimX * pos.y) + pos.x;
}

void MergedBehaviours(inout Boid boid)
{
    float2 center = 0;
    float2 close = 0;
    float2 avgVel = 0;
    uint neighbours = 0;

    uint2 gridXY = getGridLocation(boid);
    uint cell = getGridID(gridXY);

    // Loop row above, current row, row below
    for (uint y = cell - gridDimX; y <= cell + gridDimX; y += gridDimX)
    {
        // y-2 because that gives last index of boid in y-2, i.e. first index of boid in y-1
        uint start = gridOffsetBuffer[y - 2];
        uint end = gridOffsetBuffer[y + 1];
        // Loop boids in left, center, right grid cells
        for (uint i = start; i < end; i++)
        {
            Boid other = boidsIn[i];
            if (other.dead) // Don't change behaviour because of corpses
            {
                continue;
            }
            float2 diff = boid.pos - other.pos;
            float distSq = dot(diff, diff);

            if (distSq > 0 && distSq < visualRangeSq)
            {
                if (distSq < minDistanceSq)
                {
                    close += diff / distSq;

                    center += other.pos;
                    avgVel += other.vel;
                    neighbours++;
                }
            }
        }
    }

    cell = getPOIGridID(boid);

    float2 poiClose;
    // Loop row above, current row, row below
    for (uint y = cell - poiGridDimX; y <= cell + poiGridDimX; y += poiGridDimX)
    {
        // y-2 because that gives last index of boid in y-2, i.e. first index of POI in y-1
        uint start = poiOffsets[y - 2];
        uint end = poiOffsets[y + 1];
        // Loop POIs in left, center, right grid cells
        for (uint i = start; i < end; i++)
        {
            BoidPoi other = pois[i];
            float2 diff = boid.pos - other.Pos;
            float distSq = dot(diff, diff);

            if (distSq > 0 && distSq < visualRangeSq)
            {
                if (distSq < other.RadiusSQ)
                {
                    poiClose += diff / distSq;
                }
            }
        }
    }

    if (neighbours > 0)
    {
        center /= neighbours;
        avgVel /= neighbours;

        boid.vel += (center - boid.pos) * (cohesionFactor * deltaTime * turnSpeed);
        boid.vel += (avgVel - boid.vel) * (alignmentFactor * deltaTime * turnSpeed);
    }


    boid.vel += normalize(targetPos - boid.pos) * (targetFactor * deltaTime * turnSpeed);
    boid.vel += close * (separationFactor * deltaTime * turnSpeed);
    boid.vel += poiClose * (50 * deltaTime * turnSpeed);
}

void LimitSpeed(inout Boid boid)
{
    float speed = length(boid.vel);
    float clampedSpeed = clamp(speed, minSpeed, maxSpeed);
    boid.vel *= clampedSpeed / speed;
}

void KeepInBounds(inout Boid boid)
{
    if (abs(boid.pos.x) > xBound)
    {
        boid.vel.x -= sign(boid.pos.x) * deltaTime * turnSpeed;
    }
    if (abs(boid.pos.y) > yBound)
    {
        boid.vel.y -= sign(boid.pos.y) * deltaTime * turnSpeed;
    }
}

#pragma kernel UpdateBoids // ID 0
[numthreads(blockSize, 1, 1)]
void UpdateBoids(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numBoids)
    {
        // Freshly died
        if (id.x < numBoidsPrevious && combatRats)
        {
            Boid boid = boidsIn[id.x];
            boid.dead = true;
            boidsOut[id.x] = boid;
        }

        return;
    }


    Boid boid = boidsIn[id.x];

    // Initialise new boid
    if (id.x >= numBoidsPrevious)
    {
        boid.player = player;
        boid.horde = horde;
        boid.dead = false;
        if (numBoidsPrevious == 0)
        {
            boid.pos = float2(targetPosX, targetPosY);
            boid.vel = float2(0, 0);
        }
        else
        {
            if (spawnPoint.x == 0 && spawnPoint.y == 0)
            {
                boid.pos = boidsIn[floor(numBoidsPrevious / 2.0f)].pos;
            }
            else
            {
                boid.pos = spawnPoint;
            }
            boid.vel = float2(0, 0);
        }
    }

    MergedBehaviours(boid);
    LimitSpeed(boid);
    KeepInBounds(boid);

    // Update positions
    boid.pos += boid.vel * deltaTime;
    boidsOut[id.x] = boid;
}

#pragma kernel UpdateBounds
[numthreads(blockSize, 1, 1)]
void UpdateBounds(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numBoidsPrevious) return;

    Boid boid = boidsIn[id.x];
    float left = asfloat(bounds[0]);
    while (boid.pos.x < left)
    {
        InterlockedCompareStore(bounds[0], asuint(left), asuint(boid.pos.x));
        left = asfloat(bounds[0]);
    }

    float top = asfloat(bounds[1]);
    while (boid.pos.y > top)
    {
        InterlockedCompareStore(bounds[1], asuint(top), asuint(boid.pos.y));
        top = asfloat(bounds[1]);
    }

    float right = asfloat(bounds[2]);
    while (boid.pos.x > right)
    {
        InterlockedCompareStore(bounds[2], asuint(right), asuint(boid.pos.x));
        right = asfloat(bounds[2]);
    }

    float bottom = asfloat(bounds[3]);
    while (boid.pos.y < bottom)
    {
        InterlockedCompareStore(bounds[3], asuint(bottom), asuint(boid.pos.y));
        bottom = asfloat(bounds[3]);
    }
}
