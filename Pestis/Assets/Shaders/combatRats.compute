#define blockSize 512

struct Boid
{
    float2 pos;
    float2 vel;
    int player;
    int horde;
    bool dead;
};

StructuredBuffer<Boid> boidsIn;
RWStructuredBuffer<Boid> boidsOut;

uniform uint numBoids;
uniform float deltaTime;
uniform float maxSpeed;
uniform float minSpeed;
uniform float edgeMargin;
uniform float visualRangeSq;
uniform float cohesionFactor;
uniform float separationFactor;
uniform float alignmentFactor;
uniform float minDistanceSq;
uniform float turnSpeed;
uniform float xBound;
uniform float yBound;
/// Target position for boids to move towards
uniform float2 targetPos;
uniform float targetFactor;
// Player ID these boids belong to
uniform int player;
// Horde ID these boids belong to
uniform int horde;

/// Cumulative boid count for each grid cell
/// I.e. count for block N is the sum of counts for blocks 0 to N
StructuredBuffer<uint> gridOffsetBuffer;
float gridCellSize;
uint gridDimY;
uint gridDimX;

// One element per horde, element reflects how many boids of that horde to kill
RWStructuredBuffer<int> boidsToKill;

struct BoidPoi
{
    float2 Pos;
    float RadiusSQ;
};

StructuredBuffer<BoidPoi> pois;
StructuredBuffer<uint> poiOffsets;
uniform float poiGridCellSize;
uniform uint poiGridDimX;
uniform uint poiGridDimY;

RWStructuredBuffer<uint> bounds;

uint getPOIGridID(Boid boid)
{
    int x = floor(boid.pos.x / poiGridCellSize + poiGridDimX / 2);
    int y = floor(boid.pos.y / poiGridCellSize + poiGridDimY / 2);
    return (poiGridDimX * y) + x;
}


uint2 getGridLocation(Boid boid)
{
    int x = floor(boid.pos.x / gridCellSize + gridDimX / 2);
    int y = floor(boid.pos.y / gridCellSize + gridDimY / 2);
    return uint2(x, y);
}

/// Get Grid Index from 2D grid coordinate
uint getGridID(uint2 pos)
{
    return (gridDimX * pos.y) + pos.x;
}

void MergedBehaviours(inout Boid boid)
{
    float2 center = 0;
    float2 close = 0;
    float2 avgVel = 0;
    uint neighbours = 0;

    float2 closestEnemy;
    float closestEnemyDist = 99999999999999.0;

    uint2 gridXY = getGridLocation(boid);
    uint cell = getGridID(gridXY);

    // Loop row above, current row, row below
    for (uint y = cell - gridDimX; y <= cell + gridDimX; y += gridDimX)
    {
        // y-2 because that gives last index of boid in y-2, i.e. first index of boid in y-1
        uint start = gridOffsetBuffer[y - 2];
        uint end = gridOffsetBuffer[y + 1];
        // Loop boids in left, center, right grid cells
        for (uint i = start; i < end; i++)
        {
            Boid other = boidsIn[i];
            if (other.dead) // Don't change behaviour because of corpses
            {
                continue;
            }
            float2 diff = boid.pos - other.pos;
            float distSq = dot(diff, diff);

            if (distSq > 0 && distSq < visualRangeSq)
            {
                if (distSq < minDistanceSq)
                {
                    close += diff / distSq;
                }
                // If friendly
                if (other.player == boid.player)
                {
                    center += other.pos;
                    avgVel += other.vel;
                    neighbours++;
                }
                else // If enemy
                {
                    if (distSq < closestEnemyDist)
                    {
                        closestEnemy = other.pos;
                    }
                }
            }
        }
    }

    cell = getPOIGridID(boid);

    float2 poiClose;
    // Loop row above, current row, row below
    for (uint y = cell - poiGridDimX; y <= cell + poiGridDimX; y += poiGridDimX)
    {
        // y-2 because that gives last index of boid in y-2, i.e. first index of POI in y-1
        uint start = poiOffsets[y - 2];
        uint end = poiOffsets[y + 1];
        // Loop POIs in left, center, right grid cells
        for (uint i = start; i < end; i++)
        {
            BoidPoi other = pois[i];
            float2 diff = boid.pos - other.Pos;
            float distSq = dot(diff, diff);

            if (distSq > 0 && distSq < visualRangeSq)
            {
                if (distSq < other.RadiusSQ)
                {
                    poiClose += diff / distSq;
                }
            }
        }
    }

    if (neighbours > 0 && closestEnemyDist == 99999999999999.0)
    {
        center /= neighbours;
        avgVel /= neighbours;

        boid.vel += (center - boid.pos) * (cohesionFactor * deltaTime * turnSpeed);
        boid.vel += (avgVel - boid.vel) * (alignmentFactor * deltaTime * turnSpeed);
    }

    if (closestEnemyDist != 99999999999999.0)
    {
        boid.vel += (closestEnemy - boid.pos) * (cohesionFactor * deltaTime * turnSpeed);
    }

    if (neighbours == 0 && numBoids > 30) // Boid has become separated from the pack
    {
        boid.pos = boidsIn[numBoids / 2].pos;
    }


    boid.vel += normalize(targetPos - boid.pos) * (targetFactor * deltaTime * turnSpeed);
    boid.vel += close * (separationFactor * deltaTime * turnSpeed);
    boid.vel += poiClose * (50 * deltaTime * turnSpeed);
}

void LimitSpeed(inout Boid boid)
{
    float speed = length(boid.vel);
    float clampedSpeed = clamp(speed, minSpeed, maxSpeed);
    boid.vel *= clampedSpeed / speed;
}

void KeepInBounds(inout Boid boid)
{
    if (abs(boid.pos.x) > xBound)
    {
        boid.vel.x -= sign(boid.pos.x) * deltaTime * turnSpeed;
    }
    if (abs(boid.pos.y) > yBound)
    {
        boid.vel.y -= sign(boid.pos.y) * deltaTime * turnSpeed;
    }
}

#pragma kernel UpdateBoids // ID 0
[numthreads(blockSize, 1, 1)]
void UpdateBoids(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numBoids)
    {
        return;
    }

    Boid boid = boidsIn[id.x];

    if (boid.dead) return;

    // If we have neighbours and the horde needs to kill some boids
    if (id.x != 0 && id.x != numBoids && boidsToKill[boid.horde] != 0)
    {
        // If we have an enemy neighbour
        if (boidsIn[id.x - 1].player != boid.player || boidsIn[id.x + 1].player != boid.player)
        {
            int leftToKill;
            // Sets `leftToKill` to the value that was in the buffer before the call
            InterlockedAdd(boidsToKill[boid.horde], -1, leftToKill);
            if (leftToKill > 0)
            {
                boid.dead = true;
                boidsOut[id.x] = boid;
                return;
            }
        }
    }

    MergedBehaviours(boid);
    LimitSpeed(boid);
    KeepInBounds(boid);

    // Update positions
    boid.pos += boid.vel * deltaTime;
    boidsOut[id.x] = boid;
}

#pragma kernel UpdateBounds
[numthreads(blockSize, 1, 1)]
void UpdateBounds(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numBoids) return;

    Boid boid = boidsIn[id.x];

    int hordeBoundsIndex = boid.horde * 4;

    float left = asfloat(bounds[hordeBoundsIndex]);
    while (boid.pos.x < left)
    {
        InterlockedCompareStore(bounds[hordeBoundsIndex], asuint(left), asuint(boid.pos.x));
        left = asfloat(bounds[hordeBoundsIndex]);
    }

    float top = asfloat(bounds[hordeBoundsIndex + 1]);
    while (boid.pos.y > top)
    {
        InterlockedCompareStore(bounds[hordeBoundsIndex + 1], asuint(top), asuint(boid.pos.y));
        top = asfloat(bounds[hordeBoundsIndex + 1]);
    }

    float right = asfloat(bounds[hordeBoundsIndex + 2]);
    while (boid.pos.x > right)
    {
        InterlockedCompareStore(bounds[hordeBoundsIndex + 2], asuint(right), asuint(boid.pos.x));
        right = asfloat(bounds[hordeBoundsIndex + 2]);
    }

    float bottom = asfloat(bounds[hordeBoundsIndex + 3]);
    while (boid.pos.y < bottom)
    {
        InterlockedCompareStore(bounds[hordeBoundsIndex + 3], asuint(bottom), asuint(boid.pos.y));
        bottom = asfloat(bounds[hordeBoundsIndex + 3]);
    }
}
